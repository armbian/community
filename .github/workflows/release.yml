name: "Release"

on:

  schedule:
  
    - cron:  '0 16 * * 6'
    - cron:  '0 16 * * 0'
    
  workflow_dispatch:
  
jobs:

  Cancel:
    if: ${{ github.repository_owner == 'Armbian' }}
    name: "Cancel currently active"
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}

  fake:
    if: ${{ github.repository_owner == 'Armbian' }}
    runs-on: ubuntu-latest
    needs: [ Cancel ]
    name: Source changes
    outputs:
      changes: ${{steps.list_releases.outputs.changes}}
    steps:
      - run: |
          echo "not empty" > changes
      - uses: actions/upload-artifact@v3
        with:
          path: changes
          name: changes
          if-no-files-found: ignore

  clean:

    name: Purge older releases
    needs: [ fake ]
    runs-on: [ubuntu-latest]
    steps:
      - name: Purge
        uses: Vucko130/delete-older-releases@v0.2.2
        with:
          keep_latest: 3
          delete_tag_pattern: 20
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Calculate version
        run: |
          
          sudo timedatectl set-timezone "Europe/Ljubljana"
          VERSION=$(date +%Y%U)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Checkout repository
        uses: actions/checkout@v3.1.0

      - name: Set version
        uses: ncipollo/release-action@v1
        with:
          tag: "${{ env.VERSION }}"
          bodyFile: ".github/Releases-wip.md"
          name: "Community ${{ env.VERSION }}"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

  x86:

    needs: [ clean ]
    uses: armbian/scripts/.github/workflows/build-with-docker.yml@master

    with:

      variant: 'cli:beta'
      parallel: 14
      sourcerepo: 'master'
      packagesrepo: 'yes'
      runner: ubuntu-latest
      part: 1
      of: 1
      include: 'grep uefi-x86 | ${{ github.event.inputs.advanced }}'
      exclude: ''
      uploading: true
      boardtype: 'csc,tvb,wip'

    secrets:
      CR_PAT: ${{ secrets.CR_PAT }}
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}
      GPG_KEY2: ${{ secrets.GPG_KEY2 }}
      GPG_PASSPHRASE2: ${{ secrets.GPG_PASSPHRASE2 }}
      SCRIPTS_ACCESS_TOKEN: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
      SSH_KEY_TORRENTS: ${{ secrets.KEY_TORRENTS }}
      KNOWN_HOSTS_UPLOAD: ${{ secrets.KNOWN_HOSTS_UPLOAD }}

  x86-desktop:

    needs: [ clean ]
    uses: armbian/scripts/.github/workflows/build-with-docker.yml@master

    with:

      variant: 'desktop:beta'
      parallel: 14
      sourcerepo: 'master'
      packagesrepo: 'yes'
      runner: ubuntu-latest
      part: 1
      of: 1
      include: 'grep uefi-x86 | ${{ github.event.inputs.advanced }}'
      exclude: ''
      uploading: true
      boardtype: 'csc,tvb,wip'

    secrets:
      CR_PAT: ${{ secrets.CR_PAT }}
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}
      GPG_KEY2: ${{ secrets.GPG_KEY2 }}
      GPG_PASSPHRASE2: ${{ secrets.GPG_PASSPHRASE2 }}
      SCRIPTS_ACCESS_TOKEN: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
      SSH_KEY_TORRENTS: ${{ secrets.KEY_TORRENTS }}
      KNOWN_HOSTS_UPLOAD: ${{ secrets.KNOWN_HOSTS_UPLOAD }}

  x86-minimal:

    needs: [ clean ]
    uses: armbian/scripts/.github/workflows/build-with-docker.yml@master

    with:

      variant: 'minimal:beta'
      parallel: 14
      sourcerepo: 'master'
      packagesrepo: 'yes'
      runner: ubuntu-latest
      part: 1
      of: 1
      include: 'grep uefi-x86 | ${{ github.event.inputs.advanced }}'
      exclude: ''
      uploading: true
      boardtype: 'csc,tvb,wip'

    secrets:
      CR_PAT: ${{ secrets.CR_PAT }}
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}
      GPG_KEY2: ${{ secrets.GPG_KEY2 }}
      GPG_PASSPHRASE2: ${{ secrets.GPG_PASSPHRASE2 }}
      SCRIPTS_ACCESS_TOKEN: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
      SSH_KEY_TORRENTS: ${{ secrets.KEY_TORRENTS }}
      KNOWN_HOSTS_UPLOAD: ${{ secrets.KNOWN_HOSTS_UPLOAD }}

  minimal1:

    needs: [ clean ]
    uses: armbian/scripts/.github/workflows/build-with-docker.yml@master

    with:

      variant: 'minimal:beta'
      parallel: 14
      sourcerepo: 'master'
      packagesrepo: 'yes'
      runner: ubuntu-latest
      part: 1
      of: 2
      include: '${{ github.event.inputs.advanced }}'
      exclude: 'grep -v uefi-x86 | grep -v uefi-riscv64 | '
      uploading: true
      boardtype: 'csc,tvb,wip'

    secrets:
      CR_PAT: ${{ secrets.CR_PAT }}
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}
      GPG_KEY2: ${{ secrets.GPG_KEY2 }}
      GPG_PASSPHRASE2: ${{ secrets.GPG_PASSPHRASE2 }}
      SCRIPTS_ACCESS_TOKEN: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
      SSH_KEY_TORRENTS: ${{ secrets.KEY_TORRENTS }}
      KNOWN_HOSTS_UPLOAD: ${{ secrets.KNOWN_HOSTS_UPLOAD }}

  minimal2:

    needs: [ clean ]
    uses: armbian/scripts/.github/workflows/build-with-docker.yml@master

    with:

      variant: 'minimal:beta'
      parallel: 14
      sourcerepo: 'master'
      packagesrepo: 'yes'
      runner: small
      part: 2
      of: 2
      include: '${{ github.event.inputs.advanced }}'
      exclude: 'grep -v uefi-x86 | grep -v uefi-riscv64 | '
      uploading: true
      boardtype: 'csc,tvb,wip'

    secrets:
      CR_PAT: ${{ secrets.CR_PAT }}
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}
      GPG_KEY2: ${{ secrets.GPG_KEY2 }}
      GPG_PASSPHRASE2: ${{ secrets.GPG_PASSPHRASE2 }}
      SCRIPTS_ACCESS_TOKEN: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
      SSH_KEY_TORRENTS: ${{ secrets.KEY_TORRENTS }}
      KNOWN_HOSTS_UPLOAD: ${{ secrets.KNOWN_HOSTS_UPLOAD }}


  cli1:

    needs: [ clean ]
    uses: armbian/scripts/.github/workflows/build-with-docker.yml@master

    with:

      variant: 'cli:beta'
      parallel: 14
      sourcerepo: 'master'
      packagesrepo: 'yes'
      runner: small
      part: 1
      of: 2
      include: '${{ github.event.inputs.advanced }}'
      exclude: 'grep -v uefi-x86 | grep -v uefi-riscv64 | '
      uploading: true
      boardtype: 'csc,tvb,wip'

    secrets:
      CR_PAT: ${{ secrets.CR_PAT }}
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}
      GPG_KEY2: ${{ secrets.GPG_KEY2 }}
      GPG_PASSPHRASE2: ${{ secrets.GPG_PASSPHRASE2 }}
      SCRIPTS_ACCESS_TOKEN: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
      SSH_KEY_TORRENTS: ${{ secrets.KEY_TORRENTS }}
      KNOWN_HOSTS_UPLOAD: ${{ secrets.KNOWN_HOSTS_UPLOAD }}


  cli2:

    needs: [ clean ]
    uses: armbian/scripts/.github/workflows/build-with-docker.yml@master

    with:

      variant: 'cli:beta'
      parallel: 14
      sourcerepo: 'master'
      packagesrepo: 'yes'
      runner: ubuntu-latest
      part: 2
      of: 2
      include: '${{ github.event.inputs.advanced }}'
      exclude: 'grep -v uefi-x86 | grep -v uefi-riscv64 | '
      uploading: true
      boardtype: 'csc,tvb,wip'

    secrets:
      CR_PAT: ${{ secrets.CR_PAT }} 
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}
      GPG_KEY2: ${{ secrets.GPG_KEY2 }}
      GPG_PASSPHRASE2: ${{ secrets.GPG_PASSPHRASE2 }}
      SCRIPTS_ACCESS_TOKEN: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
      SSH_KEY_TORRENTS: ${{ secrets.KEY_TORRENTS }}
      KNOWN_HOSTS_UPLOAD: ${{ secrets.KNOWN_HOSTS_UPLOAD }}

  desktop1:

    needs: [ clean ]
    uses: armbian/scripts/.github/workflows/build-with-docker.yml@master

    with:
      variant: 'desktop:beta'
      parallel: 14
      sourcerepo: 'master'
      packagesrepo: 'yes'
      runner: big
      part: 1
      of: 2
      include: '${{ github.event.inputs.advanced }}'
      exclude: 'grep -v uefi-x86 | grep -v uefi-riscv64 | '
      uploading: true
      boardtype: 'csc,tvb,wip'
      
    secrets:
      CR_PAT: ${{ secrets.CR_PAT }}
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}
      GPG_KEY2: ${{ secrets.GPG_KEY2 }}
      GPG_PASSPHRASE2: ${{ secrets.GPG_PASSPHRASE2 }}
      SCRIPTS_ACCESS_TOKEN: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
      SSH_KEY_TORRENTS: ${{ secrets.KEY_TORRENTS }}
      KNOWN_HOSTS_UPLOAD: ${{ secrets.KNOWN_HOSTS_UPLOAD }}

  desktop2:

    needs: [ clean ]
    uses: armbian/scripts/.github/workflows/build-with-docker.yml@master

    with:
      variant: 'desktop:beta'
      parallel: 14
      sourcerepo: 'master'
      packagesrepo: 'yes'
      runner: ubuntu-latest
      part: 2
      of: 2
      include: '${{ github.event.inputs.advanced }}'      
      exclude: 'grep -v uefi-x86 | grep -v uefi-riscv64 | '
      uploading: true
      boardtype: 'csc,tvb,wip'

    secrets:
      CR_PAT: ${{ secrets.CR_PAT }}
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}
      GPG_KEY2: ${{ secrets.GPG_KEY2 }}
      GPG_PASSPHRASE2: ${{ secrets.GPG_PASSPHRASE2 }}
      SCRIPTS_ACCESS_TOKEN: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
      SSH_KEY_TORRENTS: ${{ secrets.KEY_TORRENTS }}
      KNOWN_HOSTS_UPLOAD: ${{ secrets.KNOWN_HOSTS_UPLOAD }}

  riscv64:

    needs: [ clean ]
    uses: armbian/scripts/.github/workflows/build-with-docker.yml@master

    with:

      variant: 'cli:beta'
      parallel: 14
      sourcerepo: 'master'
      packagesrepo: 'yes'
      runner: 'igor'
      part: 1
      of: 1
      include: '${{ github.event.inputs.advanced }}'
      exclude: 'grep uefi-riscv64 | '
      uploading: true
      boardtype: 'csc,tvb,wip'

    secrets:
      CR_PAT: ${{ secrets.CR_PAT }}
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}
      GPG_KEY2: ${{ secrets.GPG_KEY2 }}
      GPG_PASSPHRASE2: ${{ secrets.GPG_PASSPHRASE2 }}
      SCRIPTS_ACCESS_TOKEN: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
      SSH_KEY_TORRENTS: ${{ secrets.KEY_TORRENTS }}
      KNOWN_HOSTS_UPLOAD: ${{ secrets.KNOWN_HOSTS_UPLOAD }}

  riscv64-min:

    needs: [ clean ]
    uses: armbian/scripts/.github/workflows/build-with-docker.yml@master

    with:

      variant: 'minimal:beta'
      parallel: 14
      sourcerepo: 'master'
      packagesrepo: 'yes'
      runner: 'igor'
      part: 1
      of: 1
      include: '${{ github.event.inputs.advanced }}'
      exclude: 'grep uefi-riscv64 | '
      uploading: true
      boardtype: 'csc,tvb,wip'

    secrets:
      CR_PAT: ${{ secrets.CR_PAT }}
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}
      GPG_KEY2: ${{ secrets.GPG_KEY2 }}
      GPG_PASSPHRASE2: ${{ secrets.GPG_PASSPHRASE2 }}
      SCRIPTS_ACCESS_TOKEN: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
      SSH_KEY_TORRENTS: ${{ secrets.KEY_TORRENTS }}
      KNOWN_HOSTS_UPLOAD: ${{ secrets.KNOWN_HOSTS_UPLOAD }}

  riscv64-x:

    needs: [ clean ]
    uses: armbian/scripts/.github/workflows/build-with-docker.yml@master

    with:
      variant: 'desktop:beta'
      parallel: 14
      sourcerepo: 'master'
      packagesrepo: 'yes'
      runner: 'igor'
      part: 1
      of: 1
      include: '${{ github.event.inputs.advanced }}'
      exclude: 'grep uefi-riscv64 | '
      uploading: true
      boardtype: 'csc,tvb,wip'

    secrets:
      CR_PAT: ${{ secrets.CR_PAT }}
      GPG_KEY1: ${{ secrets.GPG_KEY1 }}
      GPG_PASSPHRASE1: ${{ secrets.GPG_PASSPHRASE1 }}
      GPG_KEY2: ${{ secrets.GPG_KEY2 }}
      GPG_PASSPHRASE2: ${{ secrets.GPG_PASSPHRASE2 }}
      SCRIPTS_ACCESS_TOKEN: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
      SSH_KEY_TORRENTS: ${{ secrets.KEY_TORRENTS }}
      KNOWN_HOSTS_UPLOAD: ${{ secrets.KNOWN_HOSTS_UPLOAD }}


  jobsend:

    name: finish
    needs: [x86,x86-desktop,x86-minimal,minimal1,minimal2,cli1,desktop1,cli2,desktop2,riscv64,riscv64-min,riscv64-x]
    runs-on: [ubuntu-latest]
    steps:
      - name: Assemble
        run: |
          echo "End"
